#!/usr/bin/env python3

import argparse
import sys
import os
import time
import subprocess
DBASE_PATH = os.environ.get("JT_DBASE",os.path.expanduser("~/jobtimer.log"))

def parse(field_num,lines,field_name=None):
    jobs=dict()
    day =None
    for i,l in enumerate(lines):
        start_time,job=l.split()
        start_time=int(start_time)
        if job=="STOP":
            continue
        if field_name != None and getattr(time.localtime(start_time),field_name) != field_num:
            continue
        end_time = int(lines[i+1].split()[0])
        day=time.localtime(start_time)
        existing_time = jobs.get(job,0)
        jobs[job]=existing_time+end_time-start_time
    return jobs,day

def day_range(start,end):
    "this function is needed because range(364,5) doesn't work"
    "year end bug"
    if(start > end):
        for x in range(start,367):
            yield x
        for x in range(1,end):
            yield x
    else:
        for x in range(start,end):
            yield x

 
        
    

def dump_data():
    if os.path.exists(DBASE_PATH):
        lines = open(DBASE_PATH).readlines()
    else:
        lines =[]
    if len(lines) == 0:
        sys.stderr.write("Error:Database empty\n")
        sys.exit(1)
    current_job=None
    last_job=lines[-1].split()[1]
    if last_job != "STOP":
        current_job=last_job
        lines.append(f"{int(time.time())} STOP")


    jobs,date = parse(time.localtime().tm_year,lines,None)
    max_jobname=max([len(n) for n in jobs])
    
    if(len(jobs) >0):
        print("Subtotals:")
        for k in sorted(jobs.keys()):
            hr=int(jobs[k]/3600)
            mn=int((jobs[k] - hr*3600)/60)
            print(f"   {k} {hr}:{mn:02}")
    total_time = sum([jobs[k] for k in jobs])
    hr=int(total_time/3600)
    mn=int((total_time - hr*3600)/60)

    print(f"Total: {hr}:{mn:02}")
    print('==='+'='*max_jobname+'======\n')

    start_day=time.localtime(int(lines[0].split()[0])).tm_yday
    end_day=time.localtime().tm_yday+1
    for day in day_range(start_day,end_day):
        jobs,date = parse(day,lines,"tm_yday")
        if(len(jobs) >0):
            print(time.strftime("%a %b %d",date))
            for k in sorted(jobs.keys()):
                hr=int(jobs[k]/3600)
                mn=int((jobs[k] - hr*3600)/60)
                print(f"   {k} {hr}:{mn:02}")
    if current_job is not None:
        print(f"Currently tracking {current_job}")

        

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('job_name')
    parser.add_argument('--offset','-o',default=0,type=int,
                        help="Offset the start time by this many seconds ago")
    args = parser.parse_args()
    offset_secs = args.offset*60
    job_name = args.job_name.upper()
    now = int(time.time())- offset_secs
    if job_name == "DUMP":
        dump_data()
        sys.exit(0)
    if job_name == "CLEAR":
        open(DBASE_PATH,"w").close()
        sys.exit(0)
    if os.path.exists(DBASE_PATH):
        lines = open(DBASE_PATH).readlines()
    else:
        lines =[]
    if len(lines) != 0:
        last_job = lines[-1].split()[1]
        last_job_start_time = int(lines[-1].split()[0])
        if last_job == job_name:
            sys.stderr.write("ERROR:Repeated job name\n")
            sys.exit(1)
    else:
        last_job = None
    if last_job == "STOP":
        last_job = None
    if job_name != "STOP":
        print(f"Starting job {job_name} at {time.asctime(time.localtime(now))}")
    with open(DBASE_PATH,"a") as db:
        db.write(f"{now} {job_name}\n")

    if last_job:
        last_job_duration= now-last_job_start_time
        hours = int(last_job_duration/3600)
        last_job_duration -= hours*3600
        mins = int(last_job_duration/60)
        print(f"Last job ({last_job}) ran for {hours}:{mins:02}\n")
        if job_name == "STOP":
            dump_data()
